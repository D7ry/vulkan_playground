#pragma once
#include "TransformComponent.h"
#include "ecs/Entity.h"
#include "lib/VQBuffer.h"

// component generated by phong render system
struct PhongRenderSystemInstancedComponent : IComponent
{
    // TODO: should textureID be a separate texture component?
    int textureID;  // offset used to index into global texture array
    unsigned int instanceID; // use this to index into instance buffer array
    VQBuffer* buffer
        = nullptr; // buffer[instanceID] contains a `VertexInstanceData` struct
                   // this component may write to

    // mapped memory for transform
    void flush(Entity* e) {
        // entity must own the component
        ASSERT(e->GetComponent<PhongRenderSystemInstancedComponent>() == this);
        TransformComponent* transform = e->GetComponent<TransformComponent>();
        // entity must have a transform component
        ASSERT(transform);
        glm::mat4 model = transform->GetModelMatrix();
        size_t offset = sizeof(VertexInstancedData) * instanceID;
        void* instanceBufferAddress = reinterpret_cast<void*>(
            reinterpret_cast<char*>(buffer->bufferAddress) + offset
        );
        // flush the model matrix to mapped memory
        VertexInstancedData data
        {
            model,
            textureID
        };
        memcpy(instanceBufferAddress, &data, sizeof(data)); // copy to instance buffer
    }
};
